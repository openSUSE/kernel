// SPDX-License-Identifier: GPL-2.0
//
// Send a RST to a fully established socket with pending data before
// it is accepted.
//
// The socket with pending data won't go away and can still be accepted
// with data read. But it will be in TCP_CLOSE state.

`./defaults.sh`

    0 socket(..., SOCK_STREAM|SOCK_NONBLOCK, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0
   +0 setsockopt(3, SOL_TCP, TCP_FASTOPEN, [1], 4) = 0

// Invalid cookie, so accept() fails.
   +0 < S 0:10(10) win 32792 <mss 1460,sackOK,nop,nop,FO aaaaaaaaaaaaaaaa,nop,nop>
   +0 > S. 0:0(0) ack 1 <mss 1460,nop,nop,sackOK, FO TFO_COOKIE,nop,nop>

   +0 accept(3, ..., ...) = -1 EAGAIN (Resource temporarily unavailable)

// Complete 3WHS and send data and RST
   +0 < . 1:1(0) ack 1 win 32792
   +0 < . 1:11(10) ack 1 win 32792
   +0 < R. 11:11(0) win 32792

// A valid reset won't make the fully-established socket go away.
// It's just that the acceptor will get a dead, unusable socket
// in TCP_CLOSE state.
   +0 accept(3, ..., ...) = 4
   +0 %{ assert (tcpi_options & TCPI_OPT_SYN_DATA) == 0, tcpi_options }%
   +0 %{ assert tcpi_state == TCP_CLOSE, tcpi_state }%

   +0 write(4, ..., 100) = -1 ECONNRESET(Connection reset by peer)
   +0 read(4, ..., 512) = 10
   +0 read(4, ..., 512) = 0
